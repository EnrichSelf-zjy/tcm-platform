/**
 * Â∏ñÂ≠êÊï∞ÊçÆÁªìÊûÑ
 * @typedef {Object} Post
 * @property {string} id - Â∏ñÂ≠êID
 * @property {string} title - Ê†áÈ¢ò
 * @property {string} content - ÂÜÖÂÆπ
 * @property {string} author - ‰ΩúËÄÖID
 * @property {string} category - ÂàÜÁ±ªÔºàÈóÆÁ≠î/ÂàÜ‰∫´/ËÆ®ËÆ∫Ôºâ
 * @property {string} createDate - ÂàõÂª∫Êó∂Èó¥
 * @property {number} views - ÊµèËßàÈáè
 * @property {Array} comments - ËØÑËÆ∫ÂàóË°®
 */

// Âú® forum.js È°∂ÈÉ®Ê∑ªÂä†Ë∞ÉËØïÊó•Âøó
console.log('DataStore.KEYS:', DataStore.KEYS);

// È¶ñÂÖàÂÆö‰πâÊµãËØïÊï∞ÊçÆ
const testPosts = [
    {
        id: 'post_001',
        title: 'ÂàÜ‰∫´‰∏Ä‰∏™ÂÖªÁîüËå∂ÈÖçÊñπ',
        content: 'Á∫¢Êû£+Êû∏Êùû+ËèäËä±ÔºåÊØèÂ§©‰∏ÄÊùØÂæàÂÖªÁîü...',
        authorId: 'test001',
        author: 'test_user',
        createTime: '2024-01-15T08:00:00Z',
        updateTime: '2024-01-15T08:00:00Z',
        tags: ['ÂÖªÁîüËå∂', 'ÈÖçÊñπÂàÜ‰∫´'],
        views: 120,
        likes: [],
        comments: [],
        favorites: []
    },
    {
        id: 'post_002',
        title: 'ÂÜ¨Â≠£ÂÖªÁîüÂ∞èÂ¶ôÊãõ',
        content: '1. Êó©Áù°Êó©Ëµ∑ 2. ÈÄÇÂΩìËøêÂä® 3. Ê≥®ÊÑè‰øùÊöñ...',
        authorId: 'test001',
        author: 'test_user',
        createTime: '2024-01-14T10:00:00Z',
        updateTime: '2024-01-14T10:00:00Z',
        tags: ['ÂÜ¨Â≠£ÂÖªÁîü', 'ÁîüÊ¥ª‰π†ÊÉØ'],
        views: 85,
        likes: [],
        comments: [],
        favorites: []
    },
    {
        id: 'post_003',
        title: 'Êé®Ëçê‰∏Ä‰∏™ÂÆâÁ•ûÂä©Áú†ÁöÑÊñπÂ≠ê',
        content: 'ÈÖ∏Êû£‰ªÅ„ÄÅÊüèÂ≠ê‰ªÅ„ÄÅËøúÂøó„ÄÅËåØËãì...',
        authorId: 'test001',
        author: 'test_user',
        createTime: '2024-01-13T15:30:00Z',
        updateTime: '2024-01-13T15:30:00Z',
        tags: ['Â§±Áú†', '‰∏≠ËçØÊñπÂâÇ'],
        views: 156,
        likes: [],
        comments: [],
        favorites: []
    }
];

// Âú®È°µÈù¢Âä†ËΩΩÊó∂ÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', async () => {
    try {
        // Á°Æ‰øùÂú®ËÆ∫ÂùõÈ°µÈù¢
        const forumContainer = document.querySelector('.forum-container');
        if (!forumContainer) {
            console.log('‰∏çÂú®ËÆ∫ÂùõÈ°µÈù¢');
            return;
        }

        console.log('ÂàùÂßãÂåñËÆ∫Âùõ...');

        // 1. ÂàùÂßãÂåñÊï∞ÊçÆÂ≠òÂÇ®
        initTestData();

        // 2. ÂàùÂßãÂåñÁî®Êà∑ËÆ§ËØÅ
        initAuth();

        // 3. ÂàùÂßãÂåñÁ≠õÈÄâÂíåÊêúÁ¥¢
        initFilters();
        initSearch();

        // 4. Âä†ËΩΩÂ∏ñÂ≠ê
        await loadPosts();
    } catch (error) {
        console.error('ËÆ∫ÂùõÂàùÂßãÂåñÂ§±Ë¥•:', error);
        showError('Âä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï');
    }
});

/**
 * ËÆ∫ÂùõÂäüËÉΩÂÆûÁé∞
 */

// ÂΩìÂâçÈ°µÁ†Å
let currentPage = 1;
const PAGE_SIZE = 10;

/**
 * Âä†ËΩΩÂ∏ñÂ≠êÂàóË°®
 * @param {string} filter - Á≠õÈÄâÊù°‰ª∂
 * @param {string} search - ÊêúÁ¥¢ÂÖ≥ÈîÆËØç
 */
async function loadPosts(filter = 'all', search = '') {
    try {
        console.log('ÂºÄÂßãÂä†ËΩΩÂ∏ñÂ≠ê...');
        console.log('DataStore.KEYS:', DataStore.KEYS);

        // Ëé∑ÂèñÂ∏ñÂ≠êÊï∞ÊçÆ
        let posts = DataStore.get(DataStore.KEYS.POSTS);
        console.log('‰ªé DataStore Ëé∑ÂèñÁöÑÂ∏ñÂ≠ê:', posts);

        // Â¶ÇÊûúÊ≤°ÊúâÊï∞ÊçÆÔºåÂàùÂßãÂåñÊµãËØïÊï∞ÊçÆ
        if (!posts || !Array.isArray(posts)) {
            console.log('Ê≤°ÊúâÊâæÂà∞Â∏ñÂ≠êÊï∞ÊçÆÔºåÂàùÂßãÂåñÊµãËØïÊï∞ÊçÆ');
            posts = testPosts;
            DataStore.set(DataStore.KEYS.POSTS, posts);
            console.log('ÊµãËØïÊï∞ÊçÆÂ∑≤ÂàùÂßãÂåñ');
        }

        // Â∫îÁî®Á≠õÈÄâ
        posts = filterPosts(posts, filter);
        console.log('Á≠õÈÄâÂêéÁöÑÂ∏ñÂ≠ê:', posts);

        // Â∫îÁî®ÊêúÁ¥¢
        if (search) {
            posts = posts.filter(post =>
                post.title.toLowerCase().includes(search.toLowerCase()) ||
                post.content.toLowerCase().includes(search.toLowerCase()) ||
                post.tags.some(tag => tag.toLowerCase().includes(search.toLowerCase()))
            );
            console.log('ÊêúÁ¥¢ÂêéÁöÑÂ∏ñÂ≠ê:', posts);
        }

        // ÂàÜÈ°µ
        const start = (currentPage - 1) * PAGE_SIZE;
        const end = start + PAGE_SIZE;
        const paginatedPosts = posts.slice(start, end);
        console.log('ÂàÜÈ°µÂêéÁöÑÂ∏ñÂ≠ê:', paginatedPosts);

        // Ê∏≤ÊüìÂ∏ñÂ≠ê
        renderPosts(paginatedPosts);
        console.log('Â∏ñÂ≠êÊ∏≤ÊüìÂÆåÊàê');

        // Êõ¥Êñ∞Âä†ËΩΩÊõ¥Â§öÊåâÈíÆÁä∂ÊÄÅ
        updateLoadMoreButton(posts.length > end);
    } catch (error) {
        console.error('Âä†ËΩΩÂ∏ñÂ≠êÂ§±Ë¥•:', error);
        showError('Âä†ËΩΩÂ∏ñÂ≠êÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
}

/**
 * Á≠õÈÄâÂ∏ñÂ≠ê
 * @param {Array} posts - Â∏ñÂ≠êÊï∞ÁªÑ
 * @param {string} filter - Á≠õÈÄâÊù°‰ª∂
 * @returns {Array} Á≠õÈÄâÂêéÁöÑÂ∏ñÂ≠ê
 */
function filterPosts(posts, filter) {
    const currentUser = getCurrentUser();

    switch (filter) {
        case 'trending':
            return posts.sort((a, b) => b.likes.length - a.likes.length);
        case 'latest':
            return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        case 'following':
            if (!currentUser) return [];
            return posts.filter(post =>
                currentUser.following.includes(post.authorId)
            );
        default:
            return posts;
    }
}

/**
 * Ê∏≤ÊüìÂ∏ñÂ≠êÂàóË°®
 */
function renderPosts(posts) {
    const container = document.getElementById('postsContainer');
    // Ê∑ªÂä†ÂÆπÂô®Â≠òÂú®ÊÄßÊ£ÄÊü•
    if (!container) {
        console.log('Â∏ñÂ≠êÂÆπÂô®Êú™ÊâæÂà∞');
        return;
    }

    container.innerHTML = posts.length ? posts.map(post => {
        const users = DataStore.get(DataStore.KEYS.USERS) || [];
        const author = users.find(u => u.id === post.authorId);

        // Â¶ÇÊûúÊâæ‰∏çÂà∞‰ΩúËÄÖÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº
        const authorName = author ? author.username : 'Êú™Áü•Áî®Êà∑';
        const authorAvatar = author ? author.avatar : 'üë§';

        return `
            <div class="post-card" data-id="${post.id}" onclick="openPost('${post.id}')">
                <div class="post-header">
                    <div class="post-author">
                        <div class="author-avatar">${authorAvatar}</div>
                        <div class="author-info">
                            <span class="author-name">${authorName}</span>
                            <span class="post-time">${formatTime(post.createTime)}</span>
                        </div>
                        ${getCurrentUser() && getCurrentUser().id !== post.authorId ? `
                            <button 
                                class="follow-btn ${getCurrentUser().following?.includes(post.authorId) ? 'following' : ''}"
                                onclick="toggleFollow('${post.authorId}', event)"
                            >
                                ${getCurrentUser().following?.includes(post.authorId) ? 'Â∑≤ÂÖ≥Ê≥®' : 'ÂÖ≥Ê≥®'}
                            </button>
                        ` : ''}
                    </div>
                    ${getCurrentUser()?.id === post.authorId ? `
                        <div class="post-actions">
                            <button class="edit-btn" onclick="editPost('${post.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="delete-btn" onclick="deletePost('${post.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    ` : ''}
                </div>
                <div class="post-content">
                    <h3 class="post-title">${post.title}</h3>
                    <div class="post-text">${post.content}</div>
                    ${post.tags?.length ? `
                        <div class="post-tags">
                            ${post.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                        </div>
                    ` : ''}
                </div>
                <div class="post-actions">
                    <button class="action-btn like-btn ${post.likes?.includes(getCurrentUser()?.id) ? 'active' : ''}"
                            onclick="toggleLike('${post.id}')"
                            title="${post.likes?.includes(getCurrentUser()?.id) ? 'ÂèñÊ∂àÁÇπËµû' : 'ÁÇπËµû'}">
                        <svg viewBox="0 0 24 24">
                            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                        </svg>
                        <span class="text">ÁÇπËµû</span>
                        <span class="count">${post.likes?.length || 0}</span>
                    </button>
                    <button class="action-btn comment-btn" 
                            onclick="toggleComments('${post.id}')"
                            title="ËØÑËÆ∫">
                        <svg viewBox="0 0 24 24">
                            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10z"/>
                        </svg>
                        <span class="text">ËØÑËÆ∫</span>
                        <span class="count">${post.comments?.length || 0}</span>
                    </button>
                    <button class="action-btn favorite-btn ${post.favorites?.includes(getCurrentUser()?.id) ? 'active' : ''}"
                            onclick="toggleFavorite('${post.id}')"
                            title="${post.favorites?.includes(getCurrentUser()?.id) ? 'ÂèñÊ∂àÊî∂Ëóè' : 'Êî∂Ëóè'}">
                        <svg viewBox="0 0 24 24">
                            <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/>
                        </svg>
                        <span class="text">Êî∂Ëóè</span>
                        <span class="count">${post.favorites?.length || 0}</span>
                    </button>
                    <div class="views-count" title="ÊµèËßàÈáè">
                        <svg viewBox="0 0 24 24">
                            <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                        </svg>
                        <span>${post.views || 0}</span>
                    </div>
                </div>
                <div class="comments-section" style="display: none;">
                    <div class="comments-container"></div>
                    ${getCurrentUser() ? `
                        <div class="comment-form">
                            <textarea 
                                placeholder="ÂÜô‰∏ã‰Ω†ÁöÑËØÑËÆ∫..." 
                                rows="2"
                                onkeydown="handleCommentKeydown(event, '${post.id}', this)"
                            ></textarea>
                            <button onclick="submitComment('${post.id}', this.previousElementSibling)">
                                ÂèëÈÄÅ
                            </button>
                        </div>
                    ` : `
                        <div class="login-tip">
                            <a href="login.html">ÁôªÂΩï</a>ÂêéÂèÇ‰∏éËØÑËÆ∫
                        </div>
                    `}
                </div>
            </div>
        `;
    }).join('') : '<p class="empty-message">ÊöÇÊó†Â∏ñÂ≠ê</p>';

    // ÈòªÊ≠¢ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂ÂÜíÊ≥°
    container.querySelectorAll('.post-actions button').forEach(btn => {
        btn.addEventListener('click', e => e.stopPropagation());
    });
}

/**
 * ÂàáÊç¢ËØÑËÆ∫ÊòæÁ§∫Áä∂ÊÄÅ
 */
async function toggleComments(postId) {
    const section = document.querySelector(`[data-id="${postId}"] .comments-section`);
    const container = section.querySelector('.comments-container');
    const isVisible = section.style.display !== 'none';

    if (!isVisible) {
        section.style.display = 'block';
        try {
            const comments = await forumInteraction.showComments(postId);
            container.innerHTML = comments.map(comment => `
                <div class="comment" data-id="${comment.id}">
                    <div class="comment-header">
                        <div class="comment-author">
                            <span class="author-name">${comment.author}</span>
                            <span class="comment-time">${formatTime(comment.createTime)}</span>
                        </div>
                        ${comment.authorId === getCurrentUser()?.id ? `
                            <button class="delete-btn" onclick="deleteComment('${postId}', '${comment.id}')">
                                <i class="fas fa-times"></i>
                            </button>
                        ` : ''}
                    </div>
                    <div class="comment-content">${comment.content}</div>
                </div>
            `).join('') || '<div class="no-comments">ÊöÇÊó†ËØÑËÆ∫</div>';
        } catch (error) {
            container.innerHTML = '<div class="error-message">Âä†ËΩΩËØÑËÆ∫Â§±Ë¥•</div>';
            console.error('Âä†ËΩΩËØÑËÆ∫Â§±Ë¥•:', error);
        }
    } else {
        section.style.display = 'none';
    }
}

/**
 * Â§ÑÁêÜËØÑËÆ∫Ê°ÜÊåâÈîÆ‰∫ã‰ª∂
 */
function handleCommentKeydown(event, postId, textarea) {
    // Ê£ÄÊü•ÊòØÂê¶Êåâ‰∏ãEnterÔºà‰∏çÈúÄË¶ÅCtrlÊàñCommandÔºâ
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault(); // ÈòªÊ≠¢ÈªòËÆ§Êç¢Ë°å
        submitComment(postId, textarea);
    }
}

/**
 * Êèê‰∫§ËØÑËÆ∫
 */
async function submitComment(postId, textarea) {
    const content = textarea.value.trim();
    if (!content) {
        showError('ËØ∑ËæìÂÖ•ËØÑËÆ∫ÂÜÖÂÆπ');
        return;
    }

    const currentUser = getCurrentUser();
    if (!currentUser) {
        showError('ËØ∑ÂÖàÁôªÂΩï');
        return;
    }

    try {
        await forumInteraction.addComment(postId, currentUser.id, content);
        textarea.value = '';

        // Êõ¥Êñ∞ËØÑËÆ∫ÂàóË°®
        await toggleComments(postId);

        // Êõ¥Êñ∞ËØÑËÆ∫Êï∞Èáè
        const posts = DataStore.get(DataStore.KEYS.POSTS);
        const post = posts.find(p => p.id === postId);
        const commentBtn = document.querySelector(`[data-id="${postId}"] .comment-btn`);
        if (commentBtn) {
            const countSpan = commentBtn.querySelector('.count');
            if (countSpan) {
                countSpan.textContent = post.comments.length;
                // Ê∑ªÂä†Âä®ÁîªÊïàÊûú
                countSpan.style.animation = 'none';
                countSpan.offsetHeight; // Ëß¶ÂèëÈáçÁªò
                countSpan.style.animation = 'count-update 0.3s ease';
            }
        }

        showSuccess('ËØÑËÆ∫ÂèëË°®ÊàêÂäü');
    } catch (error) {
        showError(error.message || 'ËØÑËÆ∫Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
}

/**
 * ÊòæÁ§∫ÂèëÂ∏ñË°®Âçï
 */
function showPostForm() {
    if (!getCurrentUser()) {
        alert('ËØ∑ÂÖàÁôªÂΩï');
        window.location.href = 'login.html';
        return;
    }

    document.getElementById('postFormModal').style.display = 'flex';
}

/**
 * ÂÖ≥Èó≠ÂèëÂ∏ñË°®Âçï
 */
function closePostForm() {
    document.getElementById('postFormModal').style.display = 'none';
    document.getElementById('postForm').reset();
}

/**
 * ÂèëÂ∏ÉÂ∏ñÂ≠ê
 * @param {Event} e - Ë°®ÂçïÊèê‰∫§‰∫ã‰ª∂
 */
async function submitPost(e) {
    e.preventDefault();

    try {
        const currentUser = getCurrentUser();
        if (!currentUser) throw new Error('ËØ∑ÂÖàÁôªÂΩï');

        const title = document.getElementById('postTitle').value;
        const content = document.getElementById('postContent').value;
        const tags = document.getElementById('postTags').value
            .split(',')
            .map(tag => tag.trim())
            .filter(Boolean);

        // ÂàõÂª∫Êñ∞Â∏ñÂ≠ê
        const newPost = {
            id: `post_${Date.now()}`,
            title,
            content,
            authorId: currentUser.id,
            author: currentUser.username,
            createTime: new Date().toISOString(),
            updateTime: new Date().toISOString(),
            tags,
            views: 0,
            likes: [],
            comments: [],
            favorites: []
        };

        console.log('ÂáÜÂ§áÂèëÂ∏ÉÊñ∞Â∏ñÂ≠ê:', newPost);

        // Ëé∑ÂèñÁé∞ÊúâÂ∏ñÂ≠ê
        let posts = DataStore.get(DataStore.KEYS.POSTS) || [];
        console.log('Áé∞ÊúâÂ∏ñÂ≠êÊï∞Èáè:', posts.length);

        // Ê∑ªÂä†Êñ∞Â∏ñÂ≠ê
        posts.unshift(newPost);

        // ‰øùÂ≠òÊõ¥Êñ∞ÂêéÁöÑÂ∏ñÂ≠ê
        DataStore.set(DataStore.KEYS.POSTS, posts);
        console.log('‰øùÂ≠òÂêéÁöÑÂ∏ñÂ≠êÊï∞Èáè:', posts.length);

        // ÂÖ≥Èó≠Ë°®Âçï
        closePostForm();

        // ÈáçÊñ∞Âä†ËΩΩÂ∏ñÂ≠êÂàóË°®
        currentPage = 1; // ÈáçÁΩÆÂà∞Á¨¨‰∏ÄÈ°µ
        await loadPosts();

        showError('ÂèëÂ∏ÉÊàêÂäüÔºÅ');
    } catch (error) {
        console.error('ÂèëÂ∏ÉÂ∏ñÂ≠êÂ§±Ë¥•:', error);
        showError(error.message);
    }
}

// Â∑•ÂÖ∑ÂáΩÊï∞
function generatePostId() {
    return 'post_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

/**
 * Ê†ºÂºèÂåñÂÜÖÂÆπ
 */
function formatContent(content) {
    if (!content) return '';
    return content
        .replace(/\n/g, '<br>')
        .replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>')
        .replace(/[#ÔºÉ]([^\s#ÔºÉ]+)/g, '<span class="hashtag">#$1</span>');
}

/**
 * Ê†ºÂºèÂåñÊó∂Èó¥
 */
function formatTime(timestamp) {
    if (!timestamp) return 'Êú™Áü•Êó∂Èó¥';

    const date = new Date(timestamp);
    const now = new Date();
    const diff = now - date;

    // Â§ÑÁêÜÊó†ÊïàÊó•Êúü
    if (isNaN(diff)) return 'Êú™Áü•Êó∂Èó¥';

    if (diff < 60000) return 'ÂàöÂàö';
    if (diff < 3600000) return `${Math.floor(diff / 60000)}ÂàÜÈíüÂâç`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)}Â∞èÊó∂Ââç`;
    if (diff < 604800000) return `${Math.floor(diff / 86400000)}Â§©Ââç`;

    return date.toLocaleDateString('zh-CN', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

// ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨
document.getElementById('postForm')?.addEventListener('submit', submitPost);

/**
 * Êü•ÁúãÂ∏ñÂ≠êËØ¶ÊÉÖ
 */
function viewPostDetail(postId) {
    const post = getPostById(postId);
    if (post) {
        // Êõ¥Êñ∞ÊµèËßàÈáè
        post.views++;
        updatePost(post);

        // Â≠òÂÇ®ÂΩìÂâçÊü•ÁúãÁöÑÂ∏ñÂ≠êID
        localStorage.setItem('currentPostId', postId);
        window.location.href = 'post-detail.html';
    }
}

/**
 * Ê∏≤ÊüìÂ∏ñÂ≠êËØ¶ÊÉÖ
 */
function renderPostDetail() {
    const postId = localStorage.getItem('currentPostId');
    const post = getPostById(postId);
    if (!post) return;

    document.getElementById('postTitle').textContent = post.title;
    document.getElementById('postContent').textContent = post.content;
    document.getElementById('postViews').textContent = post.views;
    document.getElementById('postAuthor').textContent = `‰ΩúËÄÖÔºö${getAuthorName(post.author)}`;
    document.getElementById('postCategory').textContent = `ÂàÜÁ±ªÔºö${post.category}`;
    document.getElementById('postDate').textContent = `Êó∂Èó¥Ôºö${new Date(post.createDate).toLocaleString()}`;

    // Ê∏≤ÊüìËØÑËÆ∫
    document.getElementById('commentsCount').textContent = post.comments.length;
    document.getElementById('commentsList').innerHTML = post.comments.map(comment => `
        <div class="comment-card">
            <div class="comment-meta">
                <span>${getAuthorName(comment.author)}</span>
                <span>${new Date(comment.date).toLocaleString()}</span>
            </div>
            <p>${comment.content}</p>
        </div>
    `).join('');
}

/**
 * ÁºñËæëÂ∏ñÂ≠ê
 * @param {string} postId - Â∏ñÂ≠êID
 */
async function editPost(postId) {
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showError('ËØ∑ÂÖàÁôªÂΩï');
        return;
    }

    const posts = DataStore.get(DataStore.KEYS.POSTS);
    const post = posts.find(p => p.id === postId);

    if (!post) {
        showError('Â∏ñÂ≠ê‰∏çÂ≠òÂú®');
        return;
    }

    if (post.authorId !== currentUser.id) {
        showError('Ê≤°ÊúâÁºñËæëÊùÉÈôê');
        return;
    }

    // ÊòæÁ§∫ÁºñËæëË°®Âçï
    document.getElementById('postTitle').value = post.title;
    document.getElementById('postContent').value = post.content;
    document.getElementById('postTags').value = post.tags.join(',');

    // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
    const modal = document.getElementById('postFormModal');
    modal.style.display = 'block';
    modal.dataset.editId = postId; // Ê†áËÆ∞Ê≠£Âú®ÁºñËæëÁöÑÂ∏ñÂ≠êID
}

/**
 * Êî∂ËóèÂ∏ñÂ≠ê
 */
async function toggleFavorite(postId) {
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showError('ËØ∑ÂÖàÁôªÂΩï');
        return;
    }

    try {
        const posts = DataStore.get(DataStore.KEYS.POSTS);
        const post = posts.find(p => p.id === postId);

        if (!post) {
            throw new Error('Â∏ñÂ≠ê‰∏çÂ≠òÂú®');
        }

        post.favorites = post.favorites || [];
        const index = post.favorites.indexOf(currentUser.id);

        // Êõ¥Êñ∞Êî∂ËóèÁä∂ÊÄÅ
        if (index === -1) {
            post.favorites.push(currentUser.id);
        } else {
            post.favorites.splice(index, 1);
        }

        // ‰øùÂ≠òÊõ¥Êñ∞
        DataStore.set(DataStore.KEYS.POSTS, posts);

        // Êõ¥Êñ∞UI
        const btn = document.querySelector(`[data-id="${postId}"] .favorite-btn`);
        if (btn) {
            const isActive = index === -1;
            btn.classList.toggle('active', isActive);

            // Êõ¥Êñ∞Êî∂ËóèÊï∞Èáè
            const countSpan = btn.querySelector('.count');
            if (countSpan) {
                // ‰ΩøÁî®Êõ¥Êñ∞ÂêéÁöÑÈïøÂ∫¶
                const newCount = isActive ? post.favorites.length : post.favorites.length;
                countSpan.textContent = newCount;

                // Ê∑ªÂä†Âä®ÁîªÊïàÊûú
                countSpan.style.animation = 'none';
                countSpan.offsetHeight; // Ëß¶ÂèëÈáçÁªò
                countSpan.style.animation = 'count-update 0.3s ease';
            }
        }

        // ÊòæÁ§∫ÊèêÁ§∫
        showSuccess(index === -1 ? 'Êî∂ËóèÊàêÂäü' : 'Â∑≤ÂèñÊ∂àÊî∂Ëóè');
    } catch (error) {
        showError(error.message);
    }
}

function reportPost() {
    const reason = prompt('ËØ∑ËæìÂÖ•‰∏æÊä•ÂéüÂõ†ÔºàÊúÄÂ§ö200Â≠óÔºâÔºö');
    if (reason && reason.length <= 200) {
        // Â∞Ü‰∏æÊä•‰ø°ÊÅØÂ≠òÂÇ®Âà∞Êú¨Âú∞
        const reports = JSON.parse(localStorage.getItem('postReports')) || [];
        reports.push({
            postId: localStorage.getItem('currentPostId'),
            reason: reason,
            date: new Date().toISOString(),
            status: 'pending'
        });
        localStorage.setItem('postReports', JSON.stringify(reports));
        alert('‰∏æÊä•Â∑≤Êèê‰∫§ÔºåÁÆ°ÁêÜÂëòÂ∞Ü‰ºöÂ∞ΩÂø´Â§ÑÁêÜ');
    }
}

// Âú®forum.js‰∏≠Ê∑ªÂä†ÊêúÁ¥¢ÂäüËÉΩ
function searchPosts() {
    const keyword = document.getElementById('searchInput').value.toLowerCase();
    const posts = JSON.parse(localStorage.getItem('forumPosts'));

    const results = posts.filter(post =>
        post.title.toLowerCase().includes(keyword) ||
        post.content.toLowerCase().includes(keyword)
    );

    renderPosts(results);
}

// Âú®ËÆ∫ÂùõÈ°µÈù¢Ê∑ªÂä†ÊêúÁ¥¢Ê°Ü 

/**
 * ËÆ∫Âùõ‰∫§‰∫íÂäüËÉΩ
 */
const forumInteraction = {
    /**
     * ÂàáÊç¢ÁÇπËµûÁä∂ÊÄÅ
     */
    toggleLike: async (postId, userId) => {
        try {
            console.log('ÂàáÊç¢ÁÇπËµûÁä∂ÊÄÅ:', postId, userId);
            const posts = DataStore.get(DataStore.KEYS.POSTS);
            const post = posts.find(p => p.id === postId);

            if (!post) {
                throw new Error('Â∏ñÂ≠ê‰∏çÂ≠òÂú®');
            }

            // Á°Æ‰øùlikesÊï∞ÁªÑÂ≠òÂú®
            post.likes = post.likes || [];
            const likeIndex = post.likes.indexOf(userId);

            if (likeIndex === -1) {
                post.likes.push(userId);
            } else {
                post.likes.splice(likeIndex, 1);
            }

            DataStore.set(DataStore.KEYS.POSTS, posts);
            console.log('ÁÇπËµûÁä∂ÊÄÅÊõ¥Êñ∞ÊàêÂäü');

            return {
                liked: likeIndex === -1,
                count: post.likes.length
            };
        } catch (error) {
            console.error('ÁÇπËµûÊìç‰ΩúÂ§±Ë¥•:', error);
            throw error;
        }
    },

    /**
     * ÊòæÁ§∫ËØÑËÆ∫
     */
    showComments: async (postId) => {
        try {
            console.log('Ëé∑ÂèñËØÑËÆ∫:', postId);
            const posts = DataStore.get(DataStore.KEYS.POSTS);
            const post = posts.find(p => p.id === postId);

            if (!post) {
                throw new Error('Â∏ñÂ≠ê‰∏çÂ≠òÂú®');
            }

            // Á°Æ‰øùcommentsÊï∞ÁªÑÂ≠òÂú®
            post.comments = post.comments || [];
            console.log('Â∏ñÂ≠êËØÑËÆ∫:', post.comments);

            // Ëé∑ÂèñËØÑËÆ∫Áî®Êà∑‰ø°ÊÅØ
            const users = DataStore.get(DataStore.KEYS.USERS) || [];
            return post.comments.map(comment => ({
                ...comment,
                author: users.find(u => u.id === comment.authorId)?.username || 'Êú™Áü•Áî®Êà∑'
            }));
        } catch (error) {
            console.error('Ëé∑ÂèñËØÑËÆ∫Â§±Ë¥•:', error);
            throw error;
        }
    },

    /**
     * Ê∑ªÂä†ËØÑËÆ∫
     * @param {string} postId - Â∏ñÂ≠êID
     * @param {string} userId - Áî®Êà∑ID
     * @param {string} content - ËØÑËÆ∫ÂÜÖÂÆπ
     */
    addComment: async (postId, userId, content) => {
        try {
            const posts = DataStore.get(DataStore.KEYS.POSTS);
            const post = posts.find(p => p.id === postId);

            if (!post) {
                throw new Error('Â∏ñÂ≠ê‰∏çÂ≠òÂú®');
            }

            const newComment = {
                id: `comment_${Date.now()}`,
                content,
                authorId: userId,
                createTime: new Date().toISOString(),
                likes: []
            };

            post.comments.push(newComment);
            DataStore.set(DataStore.KEYS.POSTS, posts);

            return newComment;
        } catch (error) {
            console.error('Ê∑ªÂä†ËØÑËÆ∫Â§±Ë¥•:', error);
            throw error;
        }
    },

    /**
     * Âà†Èô§ËØÑËÆ∫
     * @param {string} postId - Â∏ñÂ≠êID
     * @param {string} commentId - ËØÑËÆ∫ID
     * @param {string} userId - Áî®Êà∑ID
     */
    deleteComment: async (postId, commentId, userId) => {
        try {
            const posts = DataStore.get(DataStore.KEYS.POSTS);
            const post = posts.find(p => p.id === postId);

            if (!post) {
                throw new Error('Â∏ñÂ≠ê‰∏çÂ≠òÂú®');
            }

            const comment = post.comments.find(c => c.id === commentId);
            if (!comment) {
                throw new Error('ËØÑËÆ∫‰∏çÂ≠òÂú®');
            }

            // Ê£ÄÊü•ÊùÉÈôê
            if (comment.authorId !== userId && post.authorId !== userId) {
                throw new Error('Ê≤°ÊúâÂà†Èô§ÊùÉÈôê');
            }

            post.comments = post.comments.filter(c => c.id !== commentId);
            DataStore.set(DataStore.KEYS.POSTS, posts);
        } catch (error) {
            console.error('Âà†Èô§ËØÑËÆ∫Â§±Ë¥•:', error);
            throw error;
        }
    }
};

/**
 * Â∑•ÂÖ∑ÂáΩÊï∞
 */
// Ê∑ªÂä†ÊèêÁ§∫ÂáΩÊï∞
function showMessage(message, type = 'error') {
    // ÂàõÂª∫ÊèêÁ§∫ÂÖÉÁ¥†
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.innerHTML = `
        <div class="toast-content">
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
            <span>${message}</span>
        </div>
    `;

    // Ê∑ªÂä†Âà∞È°µÈù¢
    document.body.appendChild(toast);

    // ÊòæÁ§∫Âä®Áîª
    setTimeout(() => toast.classList.add('show'), 10);

    // Ëá™Âä®ÁßªÈô§
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// ÊàêÂäüÊèêÁ§∫
function showSuccess(message) {
    showMessage(message, 'success');
}

// ÈîôËØØÊèêÁ§∫
function showError(message) {
    showMessage(message, 'error');
}

function updateLoadMoreButton(hasMore) {
    const btn = document.querySelector('.load-more button');
    if (btn) {
        btn.style.display = hasMore ? 'block' : 'none';
    }
}

/**
 * ÂàùÂßãÂåñÂáΩÊï∞
 */
function initFilters() {
    const filterBtns = document.querySelectorAll('.filter-tabs .tab-btn');
    filterBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            filterBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            loadPosts(btn.dataset.filter);
        });
    });
}

/**
 * Èò≤ÊäñÂáΩÊï∞
 */
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

/**
 * ÂàùÂßãÂåñÊêúÁ¥¢ÂäüËÉΩ
 */
function initSearch() {
    const searchInput = document.querySelector('.search-bar input');
    if (!searchInput) {
        console.log('ÊêúÁ¥¢ËæìÂÖ•Ê°ÜÊú™ÊâæÂà∞');
        return;
    }

    searchInput.addEventListener('input', debounce((e) => {
        const searchTerm = e.target.value.trim().toLowerCase();
        filterPosts(searchTerm);
    }, 500));
}

// ‰øÆÊîπÂàùÂßãÂåñË∞ÉÁî®
document.addEventListener('DOMContentLoaded', () => {
    // Âè™Âú®ËÆ∫ÂùõÈ°µÈù¢ÂàùÂßãÂåñÊêúÁ¥¢
    if (document.querySelector('.forum-container')) {
        initSearch();
    }
});

// ‰øÆÊîπ‰∫ã‰ª∂Â§ÑÁêÜÂáΩÊï∞ÂêçÔºå‰∏éHTML‰∏≠‰øùÊåÅ‰∏ÄËá¥
const toggleLike = async (postId) => {
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showError('ËØ∑ÂÖàÁôªÂΩï');
        return;
    }

    try {
        const result = await forumInteraction.toggleLike(postId, currentUser.id);
        const btn = document.querySelector(`[data-id="${postId}"] .action-btn:first-child`);
        if (btn) {
            btn.classList.toggle('active', result.liked);
            btn.querySelector('.count').textContent = result.count;
        }
    } catch (error) {
        showError(error.message);
    }
};

const showComments = async (postId) => {
    try {
        const comments = await forumInteraction.showComments(postId);
        const container = document.querySelector(`[data-id="${postId}"] .comments-container`);
        if (container) {
            container.innerHTML = comments.map(comment => `
                <div class="comment">
                    <div class="comment-header">
                        <span class="comment-author">${comment.author}</span>
                        <span class="comment-time">${formatTime(comment.createTime)}</span>
                    </div>
                    <div class="comment-content">${comment.content}</div>
                    ${comment.authorId === getCurrentUser()?.id ? `
                        <button onclick="deleteComment('${postId}', '${comment.id}')" class="delete-btn">
                            <i class="fas fa-trash"></i>
                        </button>
                    ` : ''}
                </div>
            `).join('');
            container.style.display = 'block';
        }
    } catch (error) {
        showError(error.message);
    }
};

// Âà†Èô§ËØÑËÆ∫Â§ÑÁêÜÂáΩÊï∞
const deleteComment = async (postId, commentId) => {
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showError('ËØ∑ÂÖàÁôªÂΩï');
        return;
    }

    try {
        await forumInteraction.deleteComment(postId, commentId, currentUser.id);

        // Êõ¥Êñ∞ËØÑËÆ∫ÂàóË°®
        await toggleComments(postId);

        // Êõ¥Êñ∞ËØÑËÆ∫Êï∞Èáè
        const posts = DataStore.get(DataStore.KEYS.POSTS);
        const post = posts.find(p => p.id === postId);
        const commentBtn = document.querySelector(`[data-id="${postId}"] .comment-btn`);
        if (commentBtn) {
            const countSpan = commentBtn.querySelector('.count');
            if (countSpan) {
                countSpan.textContent = post.comments.length;
                // Ê∑ªÂä†Âä®ÁîªÊïàÊûú
                countSpan.style.animation = 'none';
                countSpan.offsetHeight; // Ëß¶ÂèëÈáçÁªò
                countSpan.style.animation = 'count-update 0.3s ease';
            }
        }

        showSuccess('ËØÑËÆ∫Â∑≤Âà†Èô§');
    } catch (error) {
        showError(error.message || 'Âà†Èô§Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
};

/**
 * ÊâìÂºÄÂ∏ñÂ≠êËØ¶ÊÉÖ
 */
function openPost(postId) {
    try {
        // Ëé∑ÂèñÂ∏ñÂ≠êÊï∞ÊçÆ
        const posts = DataStore.get(DataStore.KEYS.POSTS) || [];
        const post = posts.find(p => p.id === postId);
        if (!post) return;

        // ËÆ∞ÂΩïÊµèËßàËÆ∞ÂΩï
        addViewHistory(postId);

        // Êõ¥Êñ∞ÊµèËßàÈáè
        post.views = (post.views || 0) + 1;
        DataStore.set(DataStore.KEYS.POSTS, posts);

        // Ëé∑ÂèñËØÑËÆ∫Êï∞ÊçÆ
        const comments = post.comments || [];
        const currentUser = getCurrentUser();

        // ÂàõÂª∫Ê®°ÊÄÅÊ°Ü
        const modal = document.createElement('div');
        modal.className = 'post-modal';
        modal.innerHTML = `
            <div class="post-modal-content">
                <div class="post-modal-header">
                    <div class="post-author">
                        <div class="author-avatar">${post.author?.[0] || '?'}</div>
                        <div class="author-info">
                            <span class="author-name">${post.author || 'Êú™Áü•Áî®Êà∑'}</span>
                            <span class="post-time">${formatTime(post.createTime)}</span>
                        </div>
                    </div>
                    <button class="close-btn" onclick="this.closest('.post-modal').remove()">√ó</button>
                </div>
                <div class="post-modal-body">
                    <h2 class="post-title">${post.title}</h2>
                    <div class="post-content">${post.content}</div>
                    ${post.tags?.length ? `
                        <div class="post-tags">
                            ${post.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                        </div>
                    ` : ''}
                    <div class="post-stats">
                        <span>üëÅÔ∏è ${post.views || 0}</span>
                        <span>üëç ${post.likes?.length || 0}</span>
                        <span>üí¨ ${comments.length || 0}</span>
                    </div>
                </div>
                <div class="post-modal-comments">
                    <h3>ËØÑËÆ∫ (${comments.length})</h3>
                    <div class="comments-list">
                        ${comments.length ? comments.map(comment => `
                            <div class="comment">
                                <div class="comment-header">
                                    <div class="comment-author">
                                        <span class="author-name">${comment.author || 'Êú™Áü•Áî®Êà∑'}</span>
                                        <span class="comment-time">${formatTime(comment.createTime)}</span>
                                    </div>
                                    ${comment.authorId === currentUser?.id ? `
                                        <button class="delete-btn" onclick="deleteComment('${post.id}', '${comment.id}')">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    ` : ''}
                                </div>
                                <div class="comment-content">${comment.content}</div>
                            </div>
                        `).join('') : '<div class="no-comments">ÊöÇÊó†ËØÑËÆ∫</div>'}
                    </div>
                    ${currentUser ? `
                        <div class="comment-form">
                            <textarea 
                                placeholder="ÂÜô‰∏ã‰Ω†ÁöÑËØÑËÆ∫..." 
                                rows="2"
                                onkeydown="handleCommentKeydown(event, '${post.id}', this)"
                            ></textarea>
                            <button onclick="submitComment('${post.id}', this.previousElementSibling)">
                                ÂèëÈÄÅ
                            </button>
                        </div>
                    ` : `
                        <div class="login-tip">
                            <a href="login.html">ÁôªÂΩï</a>ÂêéÂèÇ‰∏éËØÑËÆ∫
                        </div>
                    `}
                </div>
            </div>
        `;

        // Ê∑ªÂä†Âà∞È°µÈù¢
        document.body.appendChild(modal);

        // Ê∑ªÂä†ESCÈîÆÂÖ≥Èó≠ÂäüËÉΩ
        document.addEventListener('keydown', function closeOnEsc(e) {
            if (e.key === 'Escape') {
                modal.remove();
                document.removeEventListener('keydown', closeOnEsc);
            }
        });

        // ÁÇπÂáªÊ®°ÊÄÅÊ°ÜÂ§ñÈÉ®ÂÖ≥Èó≠
        modal.addEventListener('click', e => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    } catch (error) {
        console.error('ÊâìÂºÄÂ∏ñÂ≠êÂ§±Ë¥•:', error);
        showError('ÊâìÂºÄÂ∏ñÂ≠êÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
}

/**
 * Ê∑ªÂä†ÊµèËßàËÆ∞ÂΩï
 */
function addViewHistory(postId) {
    const currentUser = getCurrentUser();
    if (!currentUser) return;

    try {
        // Ëé∑ÂèñÊµèËßàËÆ∞ÂΩï
        let viewHistory = DataStore.get(DataStore.KEYS.VIEW_HISTORY) || {};
        viewHistory[currentUser.id] = viewHistory[currentUser.id] || [];

        // ÁßªÈô§Â∑≤Â≠òÂú®ÁöÑÁõ∏ÂêåÂ∏ñÂ≠êËÆ∞ÂΩï
        viewHistory[currentUser.id] = viewHistory[currentUser.id].filter(item => item.postId !== postId);

        // Ê∑ªÂä†Êñ∞ÁöÑÊµèËßàËÆ∞ÂΩï
        viewHistory[currentUser.id].unshift({
            postId,
            viewTime: new Date().toISOString()
        });

        // ÈôêÂà∂ËÆ∞ÂΩïÊï∞ÈáèÔºåÂè™‰øùÁïôÊúÄËøë50Êù°
        if (viewHistory[currentUser.id].length > 50) {
            viewHistory[currentUser.id] = viewHistory[currentUser.id].slice(0, 50);
        }

        // ‰øùÂ≠òÊõ¥Êñ∞ÂêéÁöÑÊµèËßàËÆ∞ÂΩï
        DataStore.set(DataStore.KEYS.VIEW_HISTORY, viewHistory);

        // Êõ¥Êñ∞ÊµèËßàÈáèÊòæÁ§∫
        const viewsCount = document.querySelector(`[data-id="${postId}"] .views-count span`);
        if (viewsCount) {
            const posts = DataStore.get(DataStore.KEYS.POSTS) || [];
            const post = posts.find(p => p.id === postId);
            if (post) {
                viewsCount.textContent = post.views || 0;
                // Ê∑ªÂä†Âä®ÁîªÊïàÊûú
                viewsCount.style.animation = 'none';
                viewsCount.offsetHeight; // Ëß¶ÂèëÈáçÁªò
                viewsCount.style.animation = 'count-update 0.3s ease';
            }
        }
    } catch (error) {
        console.error('Ê∑ªÂä†ÊµèËßàËÆ∞ÂΩïÂ§±Ë¥•:', error);
    }
}

/**
 * ÂàáÊç¢ÂÖ≥Ê≥®Áä∂ÊÄÅ
 */
async function toggleFollow(authorId, event) {
    event.stopPropagation();

    try {
        const currentUser = getCurrentUser();
        if (!currentUser) {
            showError('ËØ∑ÂÖàÁôªÂΩï');
            return;
        }

        if (authorId === currentUser.id) {
            showError('‰∏çËÉΩÂÖ≥Ê≥®Ëá™Â∑±');
            return;
        }

        const users = DataStore.get(DataStore.KEYS.USERS) || [];
        const targetUser = users.find(u => u.id === authorId);
        const currentUserData = users.find(u => u.id === currentUser.id);

        if (!targetUser || !currentUserData) {
            console.error('Áî®Êà∑Êï∞ÊçÆËé∑ÂèñÂ§±Ë¥•:', {
                targetUserId: authorId,
                targetUser,
                currentUserId: currentUser.id,
                currentUserData,
                allUsers: users
            });
            throw new Error('Áî®Êà∑Êï∞ÊçÆËé∑ÂèñÂ§±Ë¥•');
        }

        // Á°Æ‰øùÊï∞ÁªÑÂ≠òÂú®
        currentUserData.following = currentUserData.following || [];
        targetUser.followers = targetUser.followers || [];

        const isFollowing = currentUserData.following.includes(authorId);

        if (isFollowing) {
            currentUserData.following = currentUserData.following.filter(id => id !== authorId);
            targetUser.followers = targetUser.followers.filter(id => id !== currentUser.id);
        } else {
            currentUserData.following.push(authorId);
            targetUser.followers.push(currentUser.id);
        }

        // ‰øùÂ≠òÊõ¥Êñ∞
        DataStore.set(DataStore.KEYS.USERS, users);
        localStorage.setItem('currentUser', JSON.stringify(currentUserData));

        // Êõ¥Êñ∞UI
        const followBtn = event.target;
        followBtn.classList.toggle('following', !isFollowing);
        followBtn.textContent = isFollowing ? 'ÂÖ≥Ê≥®' : 'Â∑≤ÂÖ≥Ê≥®';

        showSuccess(isFollowing ? 'Â∑≤ÂèñÊ∂àÂÖ≥Ê≥®' : 'ÂÖ≥Ê≥®ÊàêÂäü');

        return {
            following: !isFollowing,
            count: targetUser.followers.length
        };
    } catch (error) {
        console.error('ÂÖ≥Ê≥®Êìç‰ΩúÂ§±Ë¥•:', error);
        showError(error.message || 'Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
        throw error;
    }
}

// Âú®ÂàùÂßãÂåñÊó∂Ë∞ÉÁî®
function initTestData() {
    // Ëé∑ÂèñÁé∞ÊúâÁî®Êà∑Êï∞ÊçÆ
    let users = DataStore.get(DataStore.KEYS.USERS) || [];

    // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊ∑ªÂä†ÊµãËØïÁî®Êà∑
    const hasTestUser = users.some(user => user.id === 'test001');
    if (!hasTestUser) {
        users = [...testUsers, ...users];
        DataStore.set(DataStore.KEYS.USERS, users);
        console.log('ÊµãËØïÁî®Êà∑Êï∞ÊçÆÂ∑≤ÂàùÂßãÂåñ');
    }
} 